"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema OAuth2:
    r"""
    OAuth2 is the Schema for the OAuth2s API.

    Attributes
    ----------
    apiVersion : str, default is "provider.authentik.crossplane.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "OAuth2", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : ProviderAuthentikCrossplaneIoV1alpha1OAuth2Spec, default is Undefined, required
        spec
    status : ProviderAuthentikCrossplaneIoV1alpha1OAuth2Status, default is Undefined, optional
        status
    """


    apiVersion: "provider.authentik.crossplane.io/v1alpha1" = "provider.authentik.crossplane.io/v1alpha1"

    kind: "OAuth2" = "OAuth2"

    metadata?: v1.ObjectMeta

    spec: ProviderAuthentikCrossplaneIoV1alpha1OAuth2Spec

    status?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2Status


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2Spec:
    r"""
    OAuth2Spec defines the desired state of OAuth2

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProvider, default is Undefined, required
        for provider
    initProvider : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProvider

    initProvider?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecProviderConfigRef

    publishConnectionDetailsTo?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecWriteConnectionSecretToRef


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProvider:
    r"""
    provider authentik crossplane io v1alpha1 o auth2 spec for provider

    Attributes
    ----------
    accessCodeValidity : str, default is Undefined, optional
        (String) Defaults to minutes=1.
        Defaults to `minutes=1`.
    accessTokenValidity : str, default is Undefined, optional
        (String) Defaults to minutes=10.
        Defaults to `minutes=10`.
    allowedRedirectUris : [{str:str}], default is Undefined, optional
        (List of Map of String)
    authenticationFlow : str, default is Undefined, optional
        (String)
    authenticationFlowRef : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderAuthenticationFlowRef, default is Undefined, optional
        authentication flow ref
    authenticationFlowSelector : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderAuthenticationFlowSelector, default is Undefined, optional
        authentication flow selector
    authorizationFlow : str, default is Undefined, optional
        (String)
    authorizationFlowRef : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderAuthorizationFlowRef, default is Undefined, optional
        authorization flow ref
    authorizationFlowSelector : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderAuthorizationFlowSelector, default is Undefined, optional
        authorization flow selector
    clientId : str, default is Undefined, optional
        (String)
    clientSecretSecretRef : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderClientSecretSecretRef, default is Undefined, optional
        client secret secret ref
    clientType : str, default is Undefined, optional
        (String) Allowed values:
        Allowed values:
        - `confidential`
        - `public`
        Defaults to `confidential`.
    encryptionKey : str, default is Undefined, optional
        (String)
    encryptionKeyRef : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderEncryptionKeyRef, default is Undefined, optional
        encryption key ref
    encryptionKeySelector : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderEncryptionKeySelector, default is Undefined, optional
        encryption key selector
    includeClaimsInIdToken : bool, default is Undefined, optional
        (Boolean) Defaults to true.
        Defaults to `true`.
    invalidationFlow : str, default is Undefined, optional
        (String)
    invalidationFlowRef : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderInvalidationFlowRef, default is Undefined, optional
        invalidation flow ref
    invalidationFlowSelector : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderInvalidationFlowSelector, default is Undefined, optional
        invalidation flow selector
    issuerMode : str, default is Undefined, optional
        (String) Allowed values:
        Allowed values:
        - `global`
        - `per_provider`
        Defaults to `per_provider`.
    jwksSources : [str], default is Undefined, optional
        (List of String) Deprecated. Use jwt_federation_sources instead.
        Deprecated. Use `jwt_federation_sources` instead.
    jwtFederationProviders : [float], default is Undefined, optional
        (List of Number) JWTs issued by any of the configured providers can be used to authenticate on behalf of this provider.
        JWTs issued by any of the configured providers can be used to authenticate on behalf of this provider.
    jwtFederationSources : [str], default is Undefined, optional
        (List of String) JWTs issued by keys configured in any of the selected sources can be used to authenticate on behalf of this provider.
        JWTs issued by keys configured in any of the selected sources can be used to authenticate on behalf of this provider.
    name : str, default is Undefined, optional
        (String)
    propertyMappings : [str], default is Undefined, optional
        (List of String)
    propertyMappingsRefs : [ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderPropertyMappingsRefsItems0], default is Undefined, optional
        References to ProviderScope in propertymapping to populate propertyMappings.
    propertyMappingsSelector : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderPropertyMappingsSelector, default is Undefined, optional
        property mappings selector
    refreshTokenValidity : str, default is Undefined, optional
        (String) Defaults to days=30.
        Defaults to `days=30`.
    signingKey : str, default is Undefined, optional
        (String)
    signingKeyRef : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderSigningKeyRef, default is Undefined, optional
        signing key ref
    signingKeySelector : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderSigningKeySelector, default is Undefined, optional
        signing key selector
    subMode : str, default is Undefined, optional
        (String) Allowed values:
        Allowed values:
        - `hashed_user_id`
        - `user_id`
        - `user_uuid`
        - `user_username`
        - `user_email`
        - `user_upn`
        Defaults to `hashed_user_id`.
    """


    accessCodeValidity?: str

    accessTokenValidity?: str

    allowedRedirectUris?: [{str:str}]

    authenticationFlow?: str

    authenticationFlowRef?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderAuthenticationFlowRef

    authenticationFlowSelector?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderAuthenticationFlowSelector

    authorizationFlow?: str

    authorizationFlowRef?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderAuthorizationFlowRef

    authorizationFlowSelector?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderAuthorizationFlowSelector

    clientId?: str

    clientSecretSecretRef?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderClientSecretSecretRef

    clientType?: str

    encryptionKey?: str

    encryptionKeyRef?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderEncryptionKeyRef

    encryptionKeySelector?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderEncryptionKeySelector

    includeClaimsInIdToken?: bool

    invalidationFlow?: str

    invalidationFlowRef?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderInvalidationFlowRef

    invalidationFlowSelector?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderInvalidationFlowSelector

    issuerMode?: str

    jwksSources?: [str]

    jwtFederationProviders?: [float]

    jwtFederationSources?: [str]

    name?: str

    propertyMappings?: [str]

    propertyMappingsRefs?: [ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderPropertyMappingsRefsItems0]

    propertyMappingsSelector?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderPropertyMappingsSelector

    refreshTokenValidity?: str

    signingKey?: str

    signingKeyRef?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderSigningKeyRef

    signingKeySelector?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderSigningKeySelector

    subMode?: str


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderAuthenticationFlowRef:
    r"""
    Reference to a Flow in authentik to populate authenticationFlow.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderAuthenticationFlowRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderAuthenticationFlowRefPolicy


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderAuthenticationFlowRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderAuthenticationFlowSelector:
    r"""
    Selector for a Flow in authentik to populate authenticationFlow.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderAuthenticationFlowSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderAuthenticationFlowSelectorPolicy


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderAuthenticationFlowSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderAuthorizationFlowRef:
    r"""
    Reference to a Flow in authentik to populate authorizationFlow.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderAuthorizationFlowRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderAuthorizationFlowRefPolicy


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderAuthorizationFlowRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderAuthorizationFlowSelector:
    r"""
    Selector for a Flow in authentik to populate authorizationFlow.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderAuthorizationFlowSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderAuthorizationFlowSelectorPolicy


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderAuthorizationFlowSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderClientSecretSecretRef:
    r"""
    (String, Sensitive) Generated.
    Generated.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderEncryptionKeyRef:
    r"""
    Reference to a CertificateKeyPair in authentik to populate encryptionKey.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderEncryptionKeyRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderEncryptionKeyRefPolicy


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderEncryptionKeyRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderEncryptionKeySelector:
    r"""
    Selector for a CertificateKeyPair in authentik to populate encryptionKey.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderEncryptionKeySelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderEncryptionKeySelectorPolicy


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderEncryptionKeySelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderInvalidationFlowRef:
    r"""
    Reference to a Flow in authentik to populate invalidationFlow.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderInvalidationFlowRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderInvalidationFlowRefPolicy


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderInvalidationFlowRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderInvalidationFlowSelector:
    r"""
    Selector for a Flow in authentik to populate invalidationFlow.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderInvalidationFlowSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderInvalidationFlowSelectorPolicy


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderInvalidationFlowSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderPropertyMappingsRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderPropertyMappingsRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderPropertyMappingsRefsItems0Policy


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderPropertyMappingsRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderPropertyMappingsSelector:
    r"""
    Selector for a list of ProviderScope in propertymapping to populate propertyMappings.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderPropertyMappingsSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderPropertyMappingsSelectorPolicy


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderPropertyMappingsSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderSigningKeyRef:
    r"""
    Reference to a CertificateKeyPair in authentik to populate signingKey.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderSigningKeyRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderSigningKeyRefPolicy


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderSigningKeyRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderSigningKeySelector:
    r"""
    Selector for a CertificateKeyPair in authentik to populate signingKey.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderSigningKeySelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderSigningKeySelectorPolicy


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecForProviderSigningKeySelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    accessCodeValidity : str, default is Undefined, optional
        (String) Defaults to minutes=1.
        Defaults to `minutes=1`.
    accessTokenValidity : str, default is Undefined, optional
        (String) Defaults to minutes=10.
        Defaults to `minutes=10`.
    allowedRedirectUris : [{str:str}], default is Undefined, optional
        (List of Map of String)
    authenticationFlow : str, default is Undefined, optional
        (String)
    authenticationFlowRef : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderAuthenticationFlowRef, default is Undefined, optional
        authentication flow ref
    authenticationFlowSelector : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderAuthenticationFlowSelector, default is Undefined, optional
        authentication flow selector
    authorizationFlow : str, default is Undefined, optional
        (String)
    authorizationFlowRef : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderAuthorizationFlowRef, default is Undefined, optional
        authorization flow ref
    authorizationFlowSelector : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderAuthorizationFlowSelector, default is Undefined, optional
        authorization flow selector
    clientId : str, default is Undefined, optional
        (String)
    clientSecretSecretRef : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderClientSecretSecretRef, default is Undefined, optional
        client secret secret ref
    clientType : str, default is Undefined, optional
        (String) Allowed values:
        Allowed values:
        - `confidential`
        - `public`
        Defaults to `confidential`.
    encryptionKey : str, default is Undefined, optional
        (String)
    encryptionKeyRef : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderEncryptionKeyRef, default is Undefined, optional
        encryption key ref
    encryptionKeySelector : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderEncryptionKeySelector, default is Undefined, optional
        encryption key selector
    includeClaimsInIdToken : bool, default is Undefined, optional
        (Boolean) Defaults to true.
        Defaults to `true`.
    invalidationFlow : str, default is Undefined, optional
        (String)
    invalidationFlowRef : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderInvalidationFlowRef, default is Undefined, optional
        invalidation flow ref
    invalidationFlowSelector : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderInvalidationFlowSelector, default is Undefined, optional
        invalidation flow selector
    issuerMode : str, default is Undefined, optional
        (String) Allowed values:
        Allowed values:
        - `global`
        - `per_provider`
        Defaults to `per_provider`.
    jwksSources : [str], default is Undefined, optional
        (List of String) Deprecated. Use jwt_federation_sources instead.
        Deprecated. Use `jwt_federation_sources` instead.
    jwtFederationProviders : [float], default is Undefined, optional
        (List of Number) JWTs issued by any of the configured providers can be used to authenticate on behalf of this provider.
        JWTs issued by any of the configured providers can be used to authenticate on behalf of this provider.
    jwtFederationSources : [str], default is Undefined, optional
        (List of String) JWTs issued by keys configured in any of the selected sources can be used to authenticate on behalf of this provider.
        JWTs issued by keys configured in any of the selected sources can be used to authenticate on behalf of this provider.
    name : str, default is Undefined, optional
        (String)
    propertyMappings : [str], default is Undefined, optional
        (List of String)
    propertyMappingsRefs : [ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderPropertyMappingsRefsItems0], default is Undefined, optional
        References to ProviderScope in propertymapping to populate propertyMappings.
    propertyMappingsSelector : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderPropertyMappingsSelector, default is Undefined, optional
        property mappings selector
    refreshTokenValidity : str, default is Undefined, optional
        (String) Defaults to days=30.
        Defaults to `days=30`.
    signingKey : str, default is Undefined, optional
        (String)
    signingKeyRef : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderSigningKeyRef, default is Undefined, optional
        signing key ref
    signingKeySelector : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderSigningKeySelector, default is Undefined, optional
        signing key selector
    subMode : str, default is Undefined, optional
        (String) Allowed values:
        Allowed values:
        - `hashed_user_id`
        - `user_id`
        - `user_uuid`
        - `user_username`
        - `user_email`
        - `user_upn`
        Defaults to `hashed_user_id`.
    """


    accessCodeValidity?: str

    accessTokenValidity?: str

    allowedRedirectUris?: [{str:str}]

    authenticationFlow?: str

    authenticationFlowRef?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderAuthenticationFlowRef

    authenticationFlowSelector?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderAuthenticationFlowSelector

    authorizationFlow?: str

    authorizationFlowRef?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderAuthorizationFlowRef

    authorizationFlowSelector?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderAuthorizationFlowSelector

    clientId?: str

    clientSecretSecretRef?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderClientSecretSecretRef

    clientType?: str

    encryptionKey?: str

    encryptionKeyRef?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderEncryptionKeyRef

    encryptionKeySelector?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderEncryptionKeySelector

    includeClaimsInIdToken?: bool

    invalidationFlow?: str

    invalidationFlowRef?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderInvalidationFlowRef

    invalidationFlowSelector?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderInvalidationFlowSelector

    issuerMode?: str

    jwksSources?: [str]

    jwtFederationProviders?: [float]

    jwtFederationSources?: [str]

    name?: str

    propertyMappings?: [str]

    propertyMappingsRefs?: [ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderPropertyMappingsRefsItems0]

    propertyMappingsSelector?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderPropertyMappingsSelector

    refreshTokenValidity?: str

    signingKey?: str

    signingKeyRef?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderSigningKeyRef

    signingKeySelector?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderSigningKeySelector

    subMode?: str


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderAuthenticationFlowRef:
    r"""
    Reference to a Flow in authentik to populate authenticationFlow.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderAuthenticationFlowRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderAuthenticationFlowRefPolicy


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderAuthenticationFlowRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderAuthenticationFlowSelector:
    r"""
    Selector for a Flow in authentik to populate authenticationFlow.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderAuthenticationFlowSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderAuthenticationFlowSelectorPolicy


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderAuthenticationFlowSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderAuthorizationFlowRef:
    r"""
    Reference to a Flow in authentik to populate authorizationFlow.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderAuthorizationFlowRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderAuthorizationFlowRefPolicy


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderAuthorizationFlowRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderAuthorizationFlowSelector:
    r"""
    Selector for a Flow in authentik to populate authorizationFlow.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderAuthorizationFlowSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderAuthorizationFlowSelectorPolicy


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderAuthorizationFlowSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderClientSecretSecretRef:
    r"""
    (String, Sensitive) Generated.
    Generated.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderEncryptionKeyRef:
    r"""
    Reference to a CertificateKeyPair in authentik to populate encryptionKey.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderEncryptionKeyRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderEncryptionKeyRefPolicy


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderEncryptionKeyRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderEncryptionKeySelector:
    r"""
    Selector for a CertificateKeyPair in authentik to populate encryptionKey.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderEncryptionKeySelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderEncryptionKeySelectorPolicy


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderEncryptionKeySelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderInvalidationFlowRef:
    r"""
    Reference to a Flow in authentik to populate invalidationFlow.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderInvalidationFlowRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderInvalidationFlowRefPolicy


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderInvalidationFlowRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderInvalidationFlowSelector:
    r"""
    Selector for a Flow in authentik to populate invalidationFlow.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderInvalidationFlowSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderInvalidationFlowSelectorPolicy


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderInvalidationFlowSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderPropertyMappingsRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderPropertyMappingsRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderPropertyMappingsRefsItems0Policy


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderPropertyMappingsRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderPropertyMappingsSelector:
    r"""
    Selector for a list of ProviderScope in propertymapping to populate propertyMappings.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderPropertyMappingsSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderPropertyMappingsSelectorPolicy


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderPropertyMappingsSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderSigningKeyRef:
    r"""
    Reference to a CertificateKeyPair in authentik to populate signingKey.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderSigningKeyRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderSigningKeyRefPolicy


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderSigningKeyRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderSigningKeySelector:
    r"""
    Selector for a CertificateKeyPair in authentik to populate signingKey.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderSigningKeySelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderSigningKeySelectorPolicy


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecInitProviderSigningKeySelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecProviderConfigRefPolicy


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecPublishConnectionDetailsToConfigRef

    metadata?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecPublishConnectionDetailsToMetadata

    name: str


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecPublishConnectionDetailsToConfigRefPolicy


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2SpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2Status:
    r"""
    OAuth2Status defines the observed state of OAuth2.

    Attributes
    ----------
    atProvider : ProviderAuthentikCrossplaneIoV1alpha1OAuth2StatusAtProvider, default is Undefined, optional
        at provider
    conditions : [ProviderAuthentikCrossplaneIoV1alpha1OAuth2StatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: ProviderAuthentikCrossplaneIoV1alpha1OAuth2StatusAtProvider

    conditions?: [ProviderAuthentikCrossplaneIoV1alpha1OAuth2StatusConditionsItems0]

    observedGeneration?: int


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2StatusAtProvider:
    r"""
    provider authentik crossplane io v1alpha1 o auth2 status at provider

    Attributes
    ----------
    accessCodeValidity : str, default is Undefined, optional
        (String) Defaults to minutes=1.
        Defaults to `minutes=1`.
    accessTokenValidity : str, default is Undefined, optional
        (String) Defaults to minutes=10.
        Defaults to `minutes=10`.
    allowedRedirectUris : [{str:str}], default is Undefined, optional
        (List of Map of String)
    authenticationFlow : str, default is Undefined, optional
        (String)
    authorizationFlow : str, default is Undefined, optional
        (String)
    clientId : str, default is Undefined, optional
        (String)
    clientType : str, default is Undefined, optional
        (String) Allowed values:
        Allowed values:
        - `confidential`
        - `public`
        Defaults to `confidential`.
    encryptionKey : str, default is Undefined, optional
        (String)
    id : str, default is Undefined, optional
        (String) The ID of this resource.
    includeClaimsInIdToken : bool, default is Undefined, optional
        (Boolean) Defaults to true.
        Defaults to `true`.
    invalidationFlow : str, default is Undefined, optional
        (String)
    issuerMode : str, default is Undefined, optional
        (String) Allowed values:
        Allowed values:
        - `global`
        - `per_provider`
        Defaults to `per_provider`.
    jwksSources : [str], default is Undefined, optional
        (List of String) Deprecated. Use jwt_federation_sources instead.
        Deprecated. Use `jwt_federation_sources` instead.
    jwtFederationProviders : [float], default is Undefined, optional
        (List of Number) JWTs issued by any of the configured providers can be used to authenticate on behalf of this provider.
        JWTs issued by any of the configured providers can be used to authenticate on behalf of this provider.
    jwtFederationSources : [str], default is Undefined, optional
        (List of String) JWTs issued by keys configured in any of the selected sources can be used to authenticate on behalf of this provider.
        JWTs issued by keys configured in any of the selected sources can be used to authenticate on behalf of this provider.
    name : str, default is Undefined, optional
        (String)
    propertyMappings : [str], default is Undefined, optional
        (List of String)
    refreshTokenValidity : str, default is Undefined, optional
        (String) Defaults to days=30.
        Defaults to `days=30`.
    signingKey : str, default is Undefined, optional
        (String)
    subMode : str, default is Undefined, optional
        (String) Allowed values:
        Allowed values:
        - `hashed_user_id`
        - `user_id`
        - `user_uuid`
        - `user_username`
        - `user_email`
        - `user_upn`
        Defaults to `hashed_user_id`.
    """


    accessCodeValidity?: str

    accessTokenValidity?: str

    allowedRedirectUris?: [{str:str}]

    authenticationFlow?: str

    authorizationFlow?: str

    clientId?: str

    clientType?: str

    encryptionKey?: str

    id?: str

    includeClaimsInIdToken?: bool

    invalidationFlow?: str

    issuerMode?: str

    jwksSources?: [str]

    jwtFederationProviders?: [float]

    jwtFederationSources?: [str]

    name?: str

    propertyMappings?: [str]

    refreshTokenValidity?: str

    signingKey?: str

    subMode?: str


schema ProviderAuthentikCrossplaneIoV1alpha1OAuth2StatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


